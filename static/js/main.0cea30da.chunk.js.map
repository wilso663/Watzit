{"version":3,"sources":["components/card/index.js","components/board/index.js","deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","handleClick","id","type","flipped","height","width","disabled","solved","className","style","onClick","alt","src","Board","cards","dimension","map","card","key","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","App","useState","setCards","setFlipped","setDimension","setSolved","setDisabled","gameOver","setGameOver","useEffect","resizeBoard","resizeListener","window","addEventListener","removeEventListener","resetCards","resetGameOver","isMatch","clickedCard","find","flippedCard","sameCardClicked","min","document","documentElement","clientWidth","clientHeight","setTimeout","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cea30da.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './styles.css'\r\n\r\nexport default function Card({handleClick, id, type, flipped, height, width, disabled, solved})\r\n{\r\n  return( \r\n    <div className={`flip-container ${flipped ? 'flipped' : ''}`}\r\n         style={{\r\n           width, height\r\n         }}\r\n         onClick={() => disabled ? null : handleClick(id)}\r\n    >\r\n        <div className='flipper'>\r\n          <img \r\n            alt=\"Memory Game Card\"\r\n            style={{\r\n              height, width\r\n            }}\r\n            className={flipped ? 'front' : 'back'}\r\n            src={flipped || solved ? `/img/${type}.png` : `/img/CardBack.png` }\r\n          />\r\n        </div>\r\n      \r\n    </div>\r\n    )\r\n}\r\n\r\nCard.propTypes = {\r\n  disabled: PropTypes.bool.isRequired,\r\n  handleClick: PropTypes.func.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  flipped: PropTypes.bool.isRequired,\r\n  solved: PropTypes.bool.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  width: PropTypes.number.isRequired\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Card from '../card';\r\nimport './styles.css'\r\n\r\nexport default function Board({ cards, dimension, flipped, handleClick, disabled, solved })\r\n{\r\n  return (\r\n    <div className='board'>\r\n      {\r\n        cards.map((card) => ( \r\n          <Card\r\n            key={card.id} \r\n            id={card.id}\r\n            type={card.type}\r\n            width={dimension / 4.5}\r\n            height={dimension / 4.5}\r\n            flipped={flipped.includes(card.id)}\r\n            handleClick={handleClick}\r\n            disabled={disabled || solved.includes(card.id)}\r\n            solved={solved.includes(card.id)}\r\n          />\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nBoard.propTypes = {\r\n  disabled: PropTypes.bool.isRequired,\r\n  dimension: PropTypes.number.isRequired,\r\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n  handleClick: PropTypes.func.isRequired\r\n}","function shuffle(array) \r\n{\r\n  const _array = array.slice(0);\r\n  for(let i = 0; i < array.length -1 ; i++)\r\n  {\r\n    let randomIndex = Math.floor(Math.random() * (i + 1))\r\n    let temp = _array[i];\r\n    _array[i] = _array[randomIndex];\r\n    _array[randomIndex] = temp;\r\n  }\r\n\r\n  return _array\r\n}\r\n\r\nexport default function initializeDeck() \r\n{\r\n  let id = 0;\r\n  //Create two instances of every card\r\n  const cards = ['react','redux', 'angular','aws','firebase','node-js','ruby','vue'].reduce((acc, type) => {\r\n    acc.push({\r\n      id: id++,\r\n      type\r\n    })\r\n    acc.push({\r\n      id: id++,\r\n      type\r\n    })\r\n    return acc\r\n  }, [])\r\n\r\n  return shuffle(cards)\r\n}","import React, { useState, useEffect} from 'react';\nimport Board from './components/board';\nimport initializeDeck from './deck';\nimport './index.css';\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n  const [gameOver, setGameOver] = useState(false)\n\n\n  useEffect(() => {\n    resizeBoard()\n    setCards(initializeDeck())\n  }, [])\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard)\n    return () => window.removeEventListener('resize', resizeListener)\n  })\n\n  const resetDeck = () => {\n    setCards([])\n    setFlipped([])\n    setSolved([])\n    setDisabled(false)\n    setCards(initializeDeck())\n  }\n\n  const handleClick = (id) => { \n    setDisabled(true)\n\n    if(flipped.length === 0){ //If no card are flipped, \n      setFlipped([id])\n      setDisabled(false)\n    } else {\n      if(sameCardClicked(id)){\n        setDisabled(false);\n        return;\n      }\n      setFlipped([flipped[0], id]);\n      if(isMatch(id) && solved.length === 14){\n        setGameOver(true)\n        setSolved([...solved, flipped[0], id])\n        setTimeout(function() {\n          resetDeck()\n          resetGameOver()\n        }, 3000)\n      }\n      else if(isMatch(id)){\n        setSolved([...solved, flipped[0], id])\n        resetCards()\n      } else {\n        setTimeout(resetCards, 800)\n      }\n    }\n  }\n\n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  }\n\n  const resetGameOver = () => {\n    setGameOver(false)\n  }\n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id)\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\n    return flippedCard.type === clickedCard.type && flippedCard.id !== clickedCard.id\n  }\n\n  const sameCardClicked = (id) => {\n    return flipped.includes(id)\n  }\n\n  const resizeBoard = () => {\n      setDimension(Math.min(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight * .8, //restrict board height to 80% of the browser to prevent scrollbar\n      ),\n    )\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <h3>Watzit?</h3>\n      <h2>Can you remember where the cards are?</h2>\n      <Board \n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n      />\n      <div>{gameOver ? <h4>You Win!</h4> : null}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}